# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    profile_picture_upload_dir: '%kernel.project_dir%/public/app_uploads/users/profile'
    app_signup_disabled: '%env(APP_SIGNUP_DISABLED)%'
    maintenance: '%env(APP_MAINTENANCE_MODE)%'  #'true'/'false'
    support_email: '%env(APP_SUPPORT_EMAIL)%'  #'true'/'false'
    email_from: '%env(APP_EMAIL_FROM)%'  #'user@example.com'
    email_from_name: '%env(APP_EMAIL_FROM_NAME)%'  #'John Doe'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\MaintenanceListener:
        class: App\EventListener\MaintenanceListener
        arguments:
            $container: "@service_container"
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    # Doctrine Timestampable extension
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    # Doctrine Sluggable extension
    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]
    App\EventListener\UserEntityLifecycleListener:
        tags:
            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postUpdate'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'postUpdate'

            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'preUpdate'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'preUpdate'

            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'prePersist'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'prePersist'

            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postPersist'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'postPersist'

            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'preRemove'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'preRemove'

            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postRemove'
                entity: 'App\Entity\User'
                lazy: true
                entity_manager: 'default'
                method: 'postRemove'

    App\EventListener\DoctrineEventListener:
        tags:
            - # these are the basic options that define the event listener
                name: 'doctrine.event_listener'
                event: 'postPersist'
                priority: 500
                connection: 'default'
    App\EventListener\DatabaseActivitySubscriber:
        tags:
            - { name: 'doctrine.event_subscriber' }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
